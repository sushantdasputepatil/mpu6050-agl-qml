Debugging AGL application:
The Journald daemon collects messages from the kernel, initrd, any running services and other available sources and collects them into one place. This results in a massive amount of data compared to the log files you're traditionally used to such as /var/log/messages or /var/log/syslog. You'll also find a huge amount of metadata is included, which can significantly improve your results when searching the Journal.
This also results in a larger amount of data which is tricky to store in traditional text files. This is why the Journald daemon stores this information in binary files. You can read this data, using the command journalctl.
journalctl -f commands show live logging of system
journalctl | grep temp command exactly shows mpu-temp service

To check the status of a service on your system, you can use the status command:
systemctl status application.service //here replace application.service with your service found with journalctl
This will provide you with the service state, the cgroup hierarchy, and the first few log lines.

Inside QML code:
console.log, console.debug, console.info, console.warn and console.error can be used to print debugging information to the console. For example:

function f(a, b) {
  console.log("a is ", a, "b is ", b);
}
The output is generated using the qCDebug, qCWarning, qCCritical methods in C++, with a category of "qml" or "js", depending on the type of file doing the logging. 

Inside Binding code(c code):
Logging for a request-
The following macros can be used for logging in the context of a request req of type afb_req_t:
AFB_REQ_ERROR(req,fmt,...)
AFB_REQ_WARNING(req,fmt,...)
AFB_REQ_NOTICE(req,fmt,...)
AFB_REQ_INFO(req,fmt,...)
AFB_REQ_DEBUG(req,fmt,...)

Logging legacy
The following macros are provided for legacy.
AFB_ERROR(fmt,...)
AFB_WARNING(fmt,...)
AFB_NOTICE(fmt,...)
AFB_INFO(fmt,...)
AFB_DEBUG(fmt,...)

we have also used afb_req_success(r,o,i) & afb_req_fail(r,e,i) to logging errors onto console
The functions success and fail are still supported. These functions are now implemented as the following macros:
#define afb_req_success(r,o,i)		afb_req_reply(r,o,NULL,i)
#define afb_req_success_f(r,o,...)	afb_req_reply_f(r,o,NULL,__VA_ARGS__)
#define afb_req_success_v(r,o,f,v)	afb_req_reply_v(r,o,NULL,f,v)
#define afb_req_fail(r,e,i)		afb_req_reply(r,NULL,e,i)
#define afb_req_fail_f(r,e,...)		afb_req_reply_f(r,NULL,e,__VA_ARGS__)
#define afb_req_fail_v(r,e,f,v)		afb_req_reply_v(r,NULL,e,f,v)
