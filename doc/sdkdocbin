Application development process:(on ubuntu 16.04)
1.Install Docker-
$ sudo apt-get remove docker docker-engine docker.io containerd runc
$ sudo apt-get update
$ sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common
$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
$ sudo apt-key fingerprint 0EBFCD88
$ sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
$ sudo apt-get update
$ sudo apt-get install docker-ce docker-ce-cli containerd.io
$ apt-cache madison docker-ce
Install a specific version using the version string from the second column, for example, 5:18.09.1~3-0~ubuntu-xenial.
$ sudo apt-get install docker-ce=<VERSION_STRING> docker-ce-cli=<VERSION_STRING> containerd.io
$ sudo docker run hello-world // this command test docker is installed successfully or not?
2.Setup persistent workspace-
$ mkdir ~/ssd ~/devel
$ chmod a+w ~/ssd ~/devel
To gain access from your host on files created within the container, your host account requires to be added to group id 1664.
$ sudo groupadd 1664
$ sudo adduser *username 1664
3.Install the “Generic AGL Worker” Docker Image-
$ wget -O - https://download.automotivelinux.org/AGL/snapshots/sdk/docker/docker_agl_worker-generic-6.90.0-131.tar.xz | docker load;
$ docker images;
from here we get Image id of agl generic image
$ export IMAGE_ID=(Put that Image id here)
4.Start image-
$ git clone https://git.automotivelinux.org/AGL/docker-worker-generator;
$ cd docker-worker-generator;
$ ./contrib/create_container 0 $IMAGE_ID;
This command gives us message to ssh into docker container
ex.ssh -p 2223 devel@mybuilder.local;
using this ssh into Docker container.
5.Install SDK-
a.For this you can build sdk using yocto i.e. bitbake agl-demo-platform-crosssdk
Or you can directly download from this link -https://download.automotivelinux.org/AGL/snapshots/master/2019-02-04-b1043/raspberrypi3/deploy/sdk/poky-agl-glibc-x86_64-agl-demo-platform-crosssdk-armv7vehf-neon-vfpv4-toolchain-6.99.4+snapshot.sh
b.Copy this downloaded sdk into docker's folder ~/ssd/share
c.Now change the properties of sdk file to make it executable.
d.install_sdk ~/share/poky-agl-glibc-x86_64-agl-demo-platform-crosssdk-armv7vehf-neon-vfpv4-toolchain-6.99.4+snapshot.sh;
6.Build your application-
a.Now you must source the SDK environment you wish to use with
$ source /xdt/sdk/environment-setup-<your_target>
here you can take reference from directory ~/ssd/xdt_0/sdk
To verify that it succeeded, we should obtain a non-empty result for this command:
echo $CONFIG_SITE | grep sdk
b.$ git clone <your repo for your app>;
c.$ cd <your app>;
d.$ cmake; make; make package;
After the successful build, application package will be available under application's package directory.



